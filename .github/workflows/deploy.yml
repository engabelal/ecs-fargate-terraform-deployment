name: Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev

env:
  AWS_REGION: eu-north-1
  ECS_CLUSTER: url-shortener-cluster-dev
  ECS_SERVICE: url-shortener-service-dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::501235162976:role/github-actions-ecs-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Update task definition and deploy
        run: |
          # Get current task definition
          TASK_DEF=$(aws ecs describe-task-definition --task-definition url-shortener-dev --region ${{ env.AWS_REGION }})
          
          # Register new task definition with latest image
          NEW_TASK_DEF=$(echo $TASK_DEF | jq '.taskDefinition | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF" --region ${{ env.AWS_REGION }}
          
          # Trigger CodeDeploy
          aws deploy create-deployment \
            --application-name url-shortener-app-dev \
            --deployment-group-name url-shortener-dg-dev \
            --region ${{ env.AWS_REGION }}

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}

      - name: Deployment successful
        run: echo "Deployment completed successfully!"
