name: Build and Push to ECR

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: url-shortener

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::501235162976:role/github-actions-ecs-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build with version tag
          VERSION="v$(date +%Y%m%d-%H%M%S)"
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION ./app
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Push all tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "ðŸ“¦ Pushed tags: $VERSION, $IMAGE_TAG, latest"
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update Task Definition
        id: task-def
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition url-shortener-dev \
            --region ${{ env.AWS_REGION }} \
            --query 'taskDefinition' \
            --output json)
          
          NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          
          NEW_TASK_INFO=$(aws ecs register-task-definition \
            --cli-input-json "$NEW_TASK_DEF" \
            --region ${{ env.AWS_REGION }})
          
          NEW_REVISION=$(echo $NEW_TASK_INFO | jq -r '.taskDefinition.taskDefinitionArn')
          echo "task-definition-arn=$NEW_REVISION" >> $GITHUB_OUTPUT

      - name: Deploy with CodeDeploy
        run: |
          # Create appspec content
          APPSPEC_CONTENT=$(cat <<EOF | jq -c .
          {
            "version": 0.0,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "${{ steps.task-def.outputs.task-definition-arn }}",
                    "LoadBalancerInfo": {
                      "ContainerName": "url-shortener",
                      "ContainerPort": 8000
                    }
                  }
                }
              }
            ]
          }
          EOF
          )
          
          # Create deployment
          aws deploy create-deployment \
            --application-name url-shortener-dev \
            --deployment-group-name url-shortener-dg-dev \
            --revision revisionType=AppSpecContent,appSpecContent="{content='$APPSPEC_CONTENT'}" \
            --region ${{ env.AWS_REGION }}
          
          echo "âœ… Blue/Green deployment triggered!"
          echo "ðŸ”µ CodeDeploy is switching traffic from Blue to Green"
